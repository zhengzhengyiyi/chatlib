plugins {
	id 'fabric-loom' version "${loom_version}"
	id 'maven-publish'
	id 'signing'
	id "com.modrinth.minotaur" version "2.+"
}

version = project.mod_version
group = project.maven_group

base {
	archivesName = project.archives_base_name
}

repositories {
	// Add repositories to retrieve artifacts from in here.
	// You should only use this when depending on other mods because
	// Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
	// See https://docs.gradle.org/current/userguide/declaring_repositories.html
	// for more information about repositories.
}

loom {
	splitEnvironmentSourceSets()

	mods {
		"chatlib" {
			sourceSet sourceSets.main
			sourceSet sourceSets.client
		}
	}

}

dependencies {
	// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	// Fabric API. This is technically optional, but you probably want it anyway.
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
	
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": inputs.properties.version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 21
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()
	withJavadocJar()

	sourceCompatibility = JavaVersion.VERSION_21
	targetCompatibility = JavaVersion.VERSION_21
}

jar {
	inputs.property "archivesName", project.base.archivesName

	from("LICENSE") {
		rename { "${it}_${inputs.properties.archivesName}"}
	}
}

// configure the maven publication
publishing {
	publications {
		create("mavenJava", MavenPublication) {
			artifactId = project.archives_base_name
			from components.java
			
			pom {
                name = project.archives_base_name
                description = 'A Minecraft mod for editing configuration files'
                url = ''
                
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'https://www.apache.org/licenses/LICENSE-2.0'
                    }
                }
                
                developers {
                    developer {
                        id = 'zhengzhengyiyi'
                        name = 'zhengzhengyiyi'
                        email = 'zhengzhengyiyiminecraft@gmail.com'
                    }
                }
                
                scm {
                    connection = 'scm:git:https://github.com/zhengzhengyiyi/chatlib'
                    developerConnection = 'scm:git:https://zhengzhengyiyi.github.io'
                    url = 'http://modrinth.com/mod/chat-lib'
                }
            }
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		maven {
			// url = layout.buildDirectory.dir('repo')
			url = System.getProperty('user.home') + '/Desktop/repo'
		}
	}
}

modrinth {
    token = System.getenv("MODRINTH_TOKEN")
    projectId = "config-editor"
    versionType = "release"
    gameVersions = ["${project.minecraft_version}"]
    loaders = ["fabric"]
    versionNumber = "${project.mod_version}"
    uploadFile = remapJar
    dependencies {
    	required.project "fabric-api"
    }
    additionalFiles = [
        tasks.named("javadocJar").get().outputs.files.singleFile,
        tasks.named("sourcesJar").get().outputs.files.singleFile
    ]
}

javadoc {
    source += sourceSets.client.java.srcDirs
    classpath += sourceSets.client.compileClasspath
    options.encoding = 'UTF-8'
}

signing {
    useGpgCmd()
    
    sign publishing.publications.mavenJava
}
